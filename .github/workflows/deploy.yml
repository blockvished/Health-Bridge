name: Build & Deploy Node.js App to VPS
on:
  push:
    branches: [ "main" ]          # deploy only when main is updated
jobs: 
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production            # triggers GitHub's built-in manual approval
    # 1️⃣ ──────────────────────────────────────────────────────────────────────
    # Add every secret you need for build/run below.
    # These are **masked** in the logs by GitHub.
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      SITE_LINK: ${{ secrets.SITE_LINK }}
      NEXT_PUBLIC_RECAPTCHA_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}
      RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
      TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
      TWILIO_VERIFY_SID: ${{ secrets.TWILIO_VERIFY_SID }}
      PHONEPE_CLIENTID: ${{ secrets.PHONEPE_CLIENTID }}
      PHONEPE_CLIENT_SECRET: ${{ secrets.PHONEPE_CLIENT_SECRET }}
      TWITTER_CLIENT_ID: ${{ secrets.TWITTER_CLIENT_ID }}
      TWITTER_CLIENT_SECRET: ${{ secrets.TWITTER_CLIENT_SECRET }}
      LINKEDIN_CLIENT_ID: ${{ secrets.LINKEDIN_CLIENT_ID }}
      LINKEDIN_CLIENT_SECRET: ${{ secrets.LINKEDIN_CLIENT_SECRET }}
      GOOGLE_BUSINESS_CLIENT_ID: ${{ secrets.GOOGLE_BUSINESS_CLIENT_ID }}
      GOOGLE_BUSINESS_CLIENT_SECRET: ${{ secrets.GOOGLE_BUSINESS_CLIENT_SECRET }}
      FACEBOOK_CLIENT_ID: ${{ secrets.FACEBOOK_CLIENT_ID }}
      FACEBOOK_CLIENT_SECRET: ${{ secrets.FACEBOOK_CLIENT_SECRET }}
      INSTAGRAM_CLIENT_ID: ${{ secrets.INSTAGRAM_CLIENT_ID }}
      INSTAGRAM_CLIENT_SECRET: ${{ secrets.INSTAGRAM_CLIENT_SECRET }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      ZOOM_ACCOUNT_ID: ${{ secrets.ZOOM_ACCOUNT_ID }}
      ZOOM_CLIENT_ID: ${{ secrets.ZOOM_CLIENT_ID }}
      ZOOM_CLIENT_SECRET: ${{ secrets.ZOOM_CLIENT_SECRET }}
      
    # 2️⃣ ──────────────────────────────────────────────────────────────────────
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port:     ${{ secrets.VPS_PORT }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          # Forward the secret names to the remote shell (comma-separated list)
          envs: DATABASE_URL, NODE_ENV, SITE_LINK, NEXT_PUBLIC_RECAPTCHA_SITE_KEY, RECAPTCHA_SECRET_KEY, JWT_SECRET, TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_VERIFY_SID, PHONEPE_CLIENTID, PHONEPE_CLIENT_SECRET, TWITTER_CLIENT_ID, TWITTER_CLIENT_SECRET, LINKEDIN_CLIENT_ID, LINKEDIN_CLIENT_SECRET, GOOGLE_BUSINESS_CLIENT_ID, GOOGLE_BUSINESS_CLIENT_SECRET, FACEBOOK_CLIENT_ID, FACEBOOK_CLIENT_SECRET, INSTAGRAM_CLIENT_ID, INSTAGRAM_CLIENT_SECRET, EMAIL_USER, EMAIL_PASS, ZOOM_ACCOUNT_ID, ZOOM_CLIENT_ID, ZOOM_CLIENT_SECRET
          script: |
          
            # ── Go to the app directory ────────────────────────────────────
            echo "=== NAVIGATING TO APP DIRECTORY ==="
            source ~/.bashrc || source ~/.profile || true
            # Verify Node.js is available
            echo "=== CHECKING NODE.JS INSTALLATION ==="
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm use --lts
            which node || echo "Node not found in PATH"
            which npm || echo "npm not found in PATH"
            node --version || echo "Node version check failed"
            npm --version || echo "npm version check failed"
            cd /home/LiveDoctors-app/LD2025
            echo "Current directory: $(pwd)"
            
            # ── Pull latest changes ────────────────────────────────────────
            echo "=== PULLING LATEST CHANGES ==="
            git pull origin main
            
            # ── Check git status ───────────────────────────────────────────
            echo "=== GIT STATUS ==="
            git status --porcelain
            echo "Current branch: $(git branch --show-current)"
            echo "Latest commit: $(git log -1 --oneline)"
            
            # ── Install/update dependencies ────────────────────────────────
            echo "=== INSTALLING DEPENDENCIES ==="
            npm ci --production=false
            
            # ── Run build and see what happens ─────────────────────────────
            echo "=== RUNNING BUILD ==="
            npm run build
            
            # ── List contents after build ──────────────────────────────────
            echo "=== DIRECTORY CONTENTS AFTER BUILD ==="
            ls -la
