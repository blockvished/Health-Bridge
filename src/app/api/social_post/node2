// assume i have already authorized and the api accepts access_token of the user


import express from 'express';
import axios from 'axios';
import fs from 'fs';
import multer from 'multer';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const upload = multer({ dest: 'uploads/' });
app.use(express.json());

/**
 * POST /tweet
 * Body: {
 *   access_token: string;
 *   text: string;
 * }
 * Form-Data: image file under 'image'
 */
app.post('/tweet', upload.single('image'), async (req, res) => {
  const userToken = req.body.access_token;
  const text = req.body.text;

  if (!userToken) return res.status(400).json({ error: 'access_token is required' });
  if (!text) return res.status(400).json({ error: 'text is required' });
  if (!req.file) return res.status(400).json({ error: 'image file is required' });

  const filePath = req.file.path;
  const mediaData = fs.readFileSync(filePath);

  try {
    // 1. Upload media to v2 endpoint
    const uploadRes = await axios.post(
      'https://api.twitter.com/2/media/upload',
      mediaData,
      {
        headers: {
          Authorization: `Bearer ${userToken}`,
          'Content-Type': 'application/octet-stream',
          'Content-Length': mediaData.length.toString(),
        },
      }
    );
    const mediaId = uploadRes.data.media_id;

    // 2. Post tweet with media
    const tweetRes = await axios.post(
      'https://api.twitter.com/2/tweets',
      { text, media: { media_ids: [mediaId] } },
      {
        headers: {
          Authorization: `Bearer ${userToken}`,
          'Content-Type': 'application/json',
        },
      }
    );

    // Cleanup uploaded file
    fs.unlinkSync(filePath);

    return res.json(tweetRes.data);
  } catch (err: any) {
    // Cleanup on error
    fs.unlinkSync(filePath);
    const status = err.response?.status || 500;
    const data = err.response?.data || { error: err.message };
    return res.status(status).json(data);
  }
});

// Start server\(const PORT = process.env.PORT || 3000);
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
